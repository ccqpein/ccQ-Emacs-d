#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp(ql:quickload '() :silent t)
  )

(defpackage :ros.script.install.3806074880
  (:use :cl))
(in-package :ros.script.install.3806074880)

(defparameter *global-output-stream* (make-string-output-stream))
(defparameter *posix-argv* '())

(defun run-one-time-command (com &rest argvs)
  (let ((s (make-string-output-stream)))
    (sb-ext:run-program com argvs :search t :wait t :output s)
    (get-output-stream-string s)))


(defun run-command (com &rest argvs)
  (format t "Start run command ~a ~{~a ~}~%" com argvs)
  (sb-ext:process-error
   (sb-ext:run-program com argvs :search t :wait t :output *global-output-stream*)))


(defun check-this-dir ()
  (let ((this-dir (parse-namestring (run-one-time-command "pwd"))))
    (and (string= (pathname-name this-dir) ".emacs")
         (equal '(#\d #\newline)
                (concatenate 'list (pathname-type this-dir))))))


(defmacro check-if-or-yes (bool-expression mesg yes no)
  `(if ,bool-expression
      (if (yes-or-no-p ,mesg)
          ,yes
          ,no)
      ,yes))


(defmacro check-if-or-no (bool-expression mesg yes no)
  `(if ,bool-expression
      (if (yes-or-no-p ,mesg)
          ,yes
          ,no)
      ,no))


(defun clean-up ()
  (if (yes-or-no-p "Wanna cleanup? This will clean zip and emacs_source folder")
      (if (run-command "rm" "-rf" "./emacs.zip" "./emacs_source")
          (progn
            (format t "Clean up failed")
            (sb-ext:exit))
          (format t "Clean up successed"))
      nil))


(defun if-has-argv (match)
  (loop
     for v in *posix-argv*
     when (string= match v)
     return match
     finally (return "")))


;;:= TODO: need another thread to print out log in *global-output-stream*

(defun main (&rest argv)
  (setf *posix-argv* argv)
  (if (not (check-this-dir))
      (sb-ext:exit))
  
  (let* ((version "master")
         (new-version? (progn
                         (format t "Which branch you want to download? Default is ~s~%" version)
                         (read-line))))

    (if (/= 0 (length new-version?)) (setf version new-version?)) ;; if new-version is not empty

    (check-if-or-yes
     (probe-file "./emacs.zip")
     "emacs.zip already exist, wanna download it again?"
     (if (run-command "wget" (if-has-argv "--no-check-certificate") "-v"
                      (format nil "https://github.com/emacs-mirror/emacs/archive/~a.zip" version) "-O" "emacs.zip")
         (sb-ext:exit :code 1))
     nil)
       
    (check-if-or-yes
     (probe-file "./emacs_source")
     "emacs_source already exist, wanna unzip it anyway?"
     (if (run-command "unzip" "-o" "emacs.zip" "-d" "emacs_source")
         (sb-ext:exit :code 1))
     nil)

    ;;(run-command *global-output-stream* "brew" "make" "install" "autoconf" "automake" "texinfo" "gnutls" "pkg-config" "libxml2")

    (if (/= 0 (sb-posix:chdir (format nil "./emacs_source/emacs-~a" version)))
        (sb-ext:exit :code 1))
       
    (run-command "env" "PKG_CONFIG_PATH=/usr/local/opt/libxml2/lib/pkgconfig" "./autogen.sh")

    (run-command "env" "PKG_CONFIG_PATH=/usr/local/opt/libxml2/lib/pkgconfig" "./configure")

    (run-command "env" "PKG_CONFIG_PATH=/usr/local/opt/libxml2/lib/pkgconfig" "gmake" "install" "-j6")

    (run-command "open" "./nextstep")

    (if (/= 0 (sb-posix:chdir "../../"))
        (sb-ext:exit :code 1))

    (clean-up)

    (sb-ext:exit))
  )
